// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_PLAYER_TRANSFEROBJECTS_H_
#define FLATBUFFERS_GENERATED_PLAYER_TRANSFEROBJECTS_H_

#include "flatbuffers/flatbuffers.h"

namespace TransferObjects {

struct Vec3;

struct Player;

MANUALLY_ALIGNED_STRUCT(4) Vec3 FLATBUFFERS_FINAL_CLASS {
 private:
  float x_;
  float y_;
  float z_;

 public:
  Vec3() {
    memset(this, 0, sizeof(Vec3));
  }
  Vec3(float _x, float _y, float _z)
      : x_(flatbuffers::EndianScalar(_x)),
        y_(flatbuffers::EndianScalar(_y)),
        z_(flatbuffers::EndianScalar(_z)) {
  }
  float x() const {
    return flatbuffers::EndianScalar(x_);
  }
  float y() const {
    return flatbuffers::EndianScalar(y_);
  }
  float z() const {
    return flatbuffers::EndianScalar(z_);
  }
};
STRUCT_END(Vec3, 12);

struct Player FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_NAME = 4,
    VT_ZONE = 6,
    VT_POS = 8,
    VT_DEST = 10
  };
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  const flatbuffers::String *zone() const {
    return GetPointer<const flatbuffers::String *>(VT_ZONE);
  }
  const Vec3 *pos() const {
    return GetStruct<const Vec3 *>(VT_POS);
  }
  const Vec3 *dest() const {
    return GetStruct<const Vec3 *>(VT_DEST);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.Verify(name()) &&
           VerifyOffset(verifier, VT_ZONE) &&
           verifier.Verify(zone()) &&
           VerifyField<Vec3>(verifier, VT_POS) &&
           VerifyField<Vec3>(verifier, VT_DEST) &&
           verifier.EndTable();
  }
};

struct PlayerBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(Player::VT_NAME, name);
  }
  void add_zone(flatbuffers::Offset<flatbuffers::String> zone) {
    fbb_.AddOffset(Player::VT_ZONE, zone);
  }
  void add_pos(const Vec3 *pos) {
    fbb_.AddStruct(Player::VT_POS, pos);
  }
  void add_dest(const Vec3 *dest) {
    fbb_.AddStruct(Player::VT_DEST, dest);
  }
  explicit PlayerBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  PlayerBuilder &operator=(const PlayerBuilder &);
  flatbuffers::Offset<Player> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Player>(end);
    return o;
  }
};

inline flatbuffers::Offset<Player> CreatePlayer(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    flatbuffers::Offset<flatbuffers::String> zone = 0,
    const Vec3 *pos = 0,
    const Vec3 *dest = 0) {
  PlayerBuilder builder_(_fbb);
  builder_.add_dest(dest);
  builder_.add_pos(pos);
  builder_.add_zone(zone);
  builder_.add_name(name);
  return builder_.Finish();
}

inline flatbuffers::Offset<Player> CreatePlayerDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    const char *zone = nullptr,
    const Vec3 *pos = 0,
    const Vec3 *dest = 0) {
  return TransferObjects::CreatePlayer(
      _fbb,
      name ? _fbb.CreateString(name) : 0,
      zone ? _fbb.CreateString(zone) : 0,
      pos,
      dest);
}

inline const TransferObjects::Player *GetPlayer(const void *buf) {
  return flatbuffers::GetRoot<TransferObjects::Player>(buf);
}

inline const char *PlayerIdentifier() {
  return "PDAT";
}

inline bool PlayerBufferHasIdentifier(const void *buf) {
  return flatbuffers::BufferHasIdentifier(
      buf, PlayerIdentifier());
}

inline bool VerifyPlayerBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<TransferObjects::Player>(PlayerIdentifier());
}

inline void FinishPlayerBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<TransferObjects::Player> root) {
  fbb.Finish(root, PlayerIdentifier());
}

}  // namespace TransferObjects

#endif  // FLATBUFFERS_GENERATED_PLAYER_TRANSFEROBJECTS_H_
